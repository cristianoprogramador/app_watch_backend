// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  admin
  client
}

enum PeopleDocumentType {
  CNPJ
  CPF
}

model User {
  uuid      String    @id @default(uuid()) @db.Uuid
  email     String    @unique @db.VarChar(255)
  password  String    @db.Text()
  type      UserType
  disabled  Boolean   @default(false) @db.Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userDetailsUuid String?      @unique @db.Uuid
  userDetails     UserDetails? @relation(fields: [userDetailsUuid], references: [uuid])
  websites        Website[]

  @@map("users")
}

model UserDetails {
  uuid            String              @id @default(uuid()) @db.Uuid
  name            String              @db.VarChar(255)
  email           String              @unique @db.VarChar(200)
  document        String?             @unique @db.VarChar(100)
  typeDocument    PeopleDocumentType?
  profileImageUrl String?             @db.Text()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User?

  @@map("user_details")
}

model ErrorLogs {
  uuid       String    @id @default(uuid()) @db.Uuid
  statusCode Int       @db.Integer()
  error      String    @db.Text()
  message    String    @db.Text()
  url        String    @db.Text()
  headers    Json      @db.Json()
  method     String    @db.VarChar(200)
  stackTrace String?   @db.Text()
  userId     String?   @db.Uuid()
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@map("error_logs")
}

model Website {
  uuid   String  @id @default(uuid()) @db.Uuid
  name   String  @db.VarChar(255)
  url    String  @db.VarChar(255)
  token  String? @db.Text()
  userId String  @db.Uuid
  user   User    @relation(fields: [userId], references: [uuid])

  routes Route[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  siteStatus SiteStatus?

  @@map("websites")
}

model Route {
  uuid      String  @id @default(uuid()) @db.Uuid
  websiteId String  @db.Uuid
  website   Website @relation(fields: [websiteId], references: [uuid])
  method    String  @db.VarChar(10)
  route     String  @db.Text()
  body      String? @db.Text()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("routes")
}

model SiteStatus {
  uuid        String   @id @default(uuid()) @db.Uuid
  siteId      String   @unique @db.Uuid
  status      String
  lastChecked DateTime @default(now())

  site Website @relation(fields: [siteId], references: [uuid])

  @@map("site_statuses")
}
